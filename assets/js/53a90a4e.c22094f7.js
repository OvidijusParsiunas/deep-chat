"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[281],{9475:(e,t,n)=>{function s(){window.hljs||n.e(9878).then(n.bind(n,19878)).then((e=>{window.hljs=e.default}))}async function a(){return!!window.hljs||n.e(9878).then(n.bind(n,19878)).then((e=>(window.hljs=e.default,!0)))}function o(){delete window.hljs}function l(){window.webLLM||n.e(4529).then(n.bind(n,6910)).then((e=>{window.webLLM=e}))}n.d(t,{Aj:()=>a,OI:()=>s,pK:()=>l,rk:()=>o})},11820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>g,frontMatter:()=>u,metadata:()=>s,toc:()=>b});const s=JSON.parse('{"id":"docs/messages/HTML","title":"HTML","description":"You can insert and render your own code inside chat message bubbles using the html property.","source":"@site/docs/docs/messages/HTML.mdx","sourceDirName":"docs/messages","slug":"/docs/messages/HTML","permalink":"/docs/messages/HTML","draft":false,"unlisted":false,"editUrl":"https://github.com/OvidijusParsiunas/deep-chat/tree/main/website/docs/docs/messages/HTML.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"Styles","permalink":"/docs/messages/styles"},"next":{"title":"Speech","permalink":"/docs/speech"}}');var a=n(74848),o=n(28453),l=n(24033),i=n(50363),r=n(15781),d=n(78478),c=n(19365),h=n(11470);const u={sidebar_position:2},p="HTML",m={},b=[{value:"Getting started",id:"Getting Started",level:3},{value:"<code>htmlClassUtilities</code>",id:"htmlClassUtilities",level:3},{value:"Example",id:"example",level:4},{value:"Deep Chat Classes",id:"deepChatClasses",level:3},{value:"Basic Example",id:"basic-example",level:4},{value:"Bubble Style",id:"bubbleStyle",level:3},{value:"Example",id:"example-1",level:4},{value:"Custom Elements",id:"customElements",level:3},{value:"Example",id:"example-2",level:4},{value:"Examples",id:"moreExamples",level:2}];function x(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"html",children:"HTML"})}),"\n",(0,a.jsxs)(t.p,{children:["You can insert and render your own code inside chat message bubbles using the ",(0,a.jsx)(t.code,{children:"html"})," property. ",(0,a.jsx)("br",{}),"\nIf you want to use your code for an introduction panel - check out ",(0,a.jsx)(t.a,{href:"/docs/introPanel",children:(0,a.jsx)(t.code,{children:"Intro Panel"})})," instead."]}),"\n",(0,a.jsx)(t.h3,{id:"Getting Started",children:"Getting started"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"html"})," property can be used in server ",(0,a.jsx)(t.a,{href:"/docs/connect#Response",children:"Response"}),"s and is stored inside the chat using the ",(0,a.jsx)(t.a,{href:"/docs/messages#MessageContent",children:"MessageContent"})," format.\nIt must describe full (not partial) elements or simple plain text. Here is an example for ",(0,a.jsx)(t.a,{href:"/docs/messages#history",children:(0,a.jsx)(t.code,{children:"history"})}),":"]}),"\n","\n",(0,a.jsx)(d.A,{children:()=>n(61886).readdAutoNavShadowToggle()}),"\n",(0,a.jsx)(d.A,{children:()=>n(9475).OI()}),"\n",(0,a.jsx)(d.A,{children:()=>n(59359).W()}),"\n",(0,a.jsx)(d.A,{children:()=>{n(620).DeepChat}}),"\n",(0,a.jsx)(d.A,{children:()=>{n(63506)}}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,history:[{html:"<button>Button</button>",role:"user"}],style:{height:"370px",borderRadius:"8px"}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<deep-chat history=\'[{"html": "<button>Button</button>", "role": "user"}]\'></deep-chat>\n'})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\n<deep-chat\n  history=\'[{"html": "<button>Button</button>", "role": "user"}]\'\n  style="height: 370px; border-radius: 8px"\n  demo="true"\n></deep-chat>\n'})})})]}),"\n",(0,a.jsx)(r.A,{}),"\n",(0,a.jsx)(t.h3,{id:"htmlClassUtilities",children:(0,a.jsx)(t.code,{children:"htmlClassUtilities"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Type: {",(0,a.jsx)("br",{}),"\n\xa0\xa0[",(0,a.jsx)(t.code,{children:"className: string"}),"]: { ",(0,a.jsx)("br",{}),"\n\xa0\xa0\xa0\xa0 ",(0,a.jsx)(t.a,{href:"https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-app-configuration/1.1.0/interfaces/globaleventhandlerseventmap.html",children:(0,a.jsx)(t.code,{children:"events?: {[eventType: string]?: (event) => void}"})}),", ",(0,a.jsx)("br",{}),"\n\xa0\xa0\xa0\xa0 ",(0,a.jsx)(t.a,{href:"/docs/styles/#StatefulStyles",children:(0,a.jsx)(t.code,{children:"styles?: StatefulStyles"})})," ",(0,a.jsx)("br",{}),"\n}}"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Because Deep Chat is a ",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM",children:"shadow element"})," and your html is rendered inside it - the resulting elements will not be able to access the CSS and JavaScript\nin your app. To help with this, you can use this object to declare reusable styling and bind your app's functions to the elements via their class names. ",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.code,{children:"events"})," is an object that accepts properties with keys from ",(0,a.jsx)(t.a,{href:"https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-app-configuration/1.1.0/interfaces/globaleventhandlerseventmap.html",children:"GlobalEventHandlersEventMap"})," (same as the string\nused for ",(0,a.jsx)(t.em,{children:"addEventListener(HERE)"}),", e.g. ",(0,a.jsx)(t.em,{children:'"mousedown"'}),") or any custom event name and accepts a function as the value. ",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.code,{children:"styles"})," defines the styles applied to the element for different mouse states. You can alternatively define CSS styles using the ",(0,a.jsx)(t.a,{href:"/docs/styles#auxiliaryStyle",children:(0,a.jsx)(t.code,{children:"auxiliaryStyle"})})," property. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,htmlClassUtilities:{"custom-button":{events:{mouseenter:e=>{e.target.innerText="Hovering"},mouseleave:e=>{e.target.innerText="Hovered"}},styles:{default:{padding:"3px 8px",cursor:"pointer"},hover:{backgroundColor:"yellow"}}},"ai-button":{styles:{default:{color:"green"}}}},history:[{html:'<button class="custom-button">Hoverable</button>',role:"user"},{html:'<button class="custom-button ai-button">Hoverable</button>',role:"ai"}],style:{height:"370px",borderRadius:"8px"}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.htmlClassUtilities = {\n  ['custom-button']: {\n    events: {\n      mouseenter: (event) => (event.target.innerText = 'Hovering'),\n      mouseleave: (event) => (event.target.innerText = 'Hovered'),\n    },\n    styles: {\n      default: {padding: '3px 8px', cursor: 'pointer'},\n      hover: {backgroundColor: 'yellow'},\n    },\n  },\n  ['ai-button']: {\n    styles: {\n      default: {color: 'green'},\n    },\n  },\n};\nchatElementRef.history = [\n  {html: '<button class=\"custom-button\">Hoverable</button>', role: 'user'},\n  {html: '<button class=\"custom-button ai-button\">Hoverable</button>', role: 'ai'},\n];\n"})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.htmlClassUtilities = {\n  ['custom-button']: {\n    events: {\n      mouseenter: (event) => (event.target.innerText = 'Hovering'),\n      mouseleave: (event) => (event.target.innerText = 'Hovered'),\n    },\n    styles: {\n      default: {padding: '3px 8px', cursor: 'pointer'},\n      hover: {backgroundColor: 'yellow'},\n    },\n  },\n  ['ai-button']: {\n    styles: {\n      default: {color: 'green'},\n    },\n  },\n};\nchatElementRef.history = [\n  {html: '<button class=\"custom-button\">Hoverable</button>', role: 'user'},\n  {html: '<button class=\"custom-button ai-button\">Hoverable</button>', role: 'ai'},\n];\nObject.assign(chatElementRef.style, {height: '370px', borderRadius: '8px'});\nchatElementRef.demo = true;\n"})})})]}),"\n",(0,a.jsx)(t.h3,{id:"deepChatClasses",children:"Deep Chat Classes"}),"\n",(0,a.jsxs)(t.p,{children:["Deep Chat comes with a pre-defined set of classes that can be used to add styling/functionality to your elements. ",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.code,{children:"deep-chat-button"})," - applies default button styling. ",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.code,{children:"deep-chat-suggestion-button"})," - when clicked sends the text that is inside the button as a new user message. ",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.code,{children:"deep-chat-temporary-message"})," - removes the message when a new one is added to the chat. This class needs to be applied\nto the parent-most element in the ",(0,a.jsx)(t.code,{children:"html"})," string. This message is also not tracked in state. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(t.h4,{id:"basic-example",children:"Basic Example"}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{history:[{html:'<button class="deep-chat-button deep-chat-suggestion-button">Hello</button>',role:"ai"},{html:'<button class="deep-chat-suggestion-button deep-chat-temporary-message">Goodbye</button>',role:"user"}],style:{height:"370px",borderRadius:"8px"},demo:!0})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {html: '<button class=\"deep-chat-button deep-chat-suggestion-button\">Hello</button>', role: 'ai'},\n  {html: '<button class=\"deep-chat-suggestion-button deep-chat-temporary-message\">Goodbye</button>', role: 'user'},\n];\n"})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {html: '<button class=\"deep-chat-button deep-chat-suggestion-button\">Hello</button>', role: 'ai'},\n  {html: '<button class=\"deep-chat-suggestion-button deep-chat-temporary-message\">Goodbye</button>', role: 'user'},\n];\nObject.assign(chatElementRef.style, {height: '370px', borderRadius: '8px'});\nchatElementRef.demo = true;\n"})})})]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["If you have suggestions for new classes that you think would be useful, please raise an ",(0,a.jsx)(t.a,{href:"https://github.com/OvidijusParsiunas/deep-chat/issues",children:"issue"})," on GitHub."]})}),"\n",(0,a.jsx)(r.A,{}),"\n",(0,a.jsx)(t.h3,{id:"bubbleStyle",children:"Bubble Style"}),"\n",(0,a.jsxs)(t.p,{children:["To unset/change the message bubble styling, use the ",(0,a.jsx)(t.code,{children:"html"})," property in the ",(0,a.jsx)(t.a,{href:"/docs/messages/styles#messageStyles",children:"messageStyles"})," object."]}),"\n",(0,a.jsx)(t.h4,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,history:[{html:"<button>User button</button>",role:"user"}],messageStyles:{html:{shared:{bubble:{backgroundColor:"unset"}}}},style:{height:"370px",borderRadius:"8px"}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<deep-chat messageStyles=\'{"html": {"shared": {"bubble": {"backgroundColor": "unset"}}}}\'></deep-chat>\n'})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\n<deep-chat\n  messageStyles=\'{"html": {"shared": {"bubble": {"backgroundColor": "unset"}}}}\'\n  history=\'[{"html": "<button>User button</button>", "role": "user"}]\'\n  style="height: 370px; border-radius: 8px"\n  demo="true"\n></deep-chat>\n'})})})]}),"\n",(0,a.jsx)(r.A,{}),"\n",(0,a.jsx)(t.h3,{id:"customElements",children:"Custom Elements"}),"\n",(0,a.jsxs)(t.p,{children:["If the ",(0,a.jsx)(t.code,{children:"html"})," string includes your own custom tags (e.g. ",(0,a.jsx)(t.code,{children:"<custom-element>"}),"), they cannot be for the components in your framework\nand must instead be for ",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements",children:"custom elements"}),"\nor ",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM",children:"shadow DOM elements"}),"\n(",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_components",children:"web components"}),"). ",(0,a.jsx)("br",{}),"\nTo create new web components - use any of the following approaches:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Most frameworks include a way to convert their components into shadow elements/web components. Please refer to their documentation for more information."}),"\n",(0,a.jsxs)(t.li,{children:["You can also create new web components in your app using basic JavaScript - refer to ",(0,a.jsx)(t.a,{href:"https://javascript.plainenglish.io/introduction-to-web-components-in-javascript-create-a-hello-world-web-component-e624874ec3b1",children:"this guide"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["Web components can ultimately be created in any way you desire using any framework outside of your project and imported the same ways as you do\n",(0,a.jsx)(t.code,{children:"deep-chat"}),". To note, this approach may require you to first import or use them in your app's code in order for your bundler to register them."]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,history:[{html:"<custom-element/>",role:"user"}],style:{height:"370px",borderRadius:"8px"}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:'// This is a simple way to create web components via JavaScript, refer to all possibilities above\n\n// JavaScript\nclass CustomElement extends HTMLElement {\n  constructor() {\n    super();\n    this.textContent = \'This is a Custom Element\';\n  }\n}\n\ncustomElements.define(\'custom-element\', CustomElement);\n\n// HTML\n<deep-chat history=\'[{"html": "<custom-element/>", "role": "user"}]\'></deep-chat>\n'})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:'// This is a simple way to create web components via JavaScript, refer to all possibilities above\n\n// JavaScript\nclass CustomElement extends HTMLElement {\n  constructor() {\n    super();\n    this.textContent = \'This is a Custom Element\';\n  }\n}\n\ncustomElements.define(\'custom-element\', CustomElement);\n\n// HTML\n<deep-chat\n  history=\'[{"html": "<custom-element/>", "role": "user"}]\'\n  style="height: 370px; border-radius: 8px"\n  demo="true"\n></deep-chat>\n'})})})]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["When passing values into your custom element, you need to pass them as ",(0,a.jsx)(t.a,{href:"https://www.w3schools.com/html/html_attributes.asp",children:"attributes"})," (they must be stringified). E.g.\n",(0,a.jsx)(t.code,{children:'{"html": "<custom-element count="0" name="jeff"></custom-element>"}'})]})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["If you are experiencing problems with embedding your custom elements inside the chat, you can always raise an ",(0,a.jsx)(t.a,{href:"https://github.com/OvidijusParsiunas/deep-chat/issues",children:"issue"})," on GitHub.\nWhen you do please provide us with either a ",(0,a.jsx)(t.a,{href:"https://codesandbox.io/",children:"sandbox"})," example or sufficient information to enable us to replicate the problem."]})}),"\n",(0,a.jsx)(r.A,{}),"\n",(0,a.jsx)(t.h2,{id:"moreExamples",children:"Examples"}),"\n",(0,a.jsx)("h3",{children:"Suggestion buttons"}),"\n",(0,a.jsxs)(t.p,{children:["Basic suggestion buttons using ",(0,a.jsx)(t.a,{href:"#deepChatClasses",children:"Deep Chat Classes"}),"."]}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,history:[{text:"How are you doing?",role:"user"},{text:"Good, how may I help?",role:"ai"},{html:'\n        <div class="deep-chat-temporary-message">\n          <button class="deep-chat-button deep-chat-suggestion-button" style="margin-top: 5px">What do shrimps eat?</button>\n          <button class="deep-chat-button deep-chat-suggestion-button" style="margin-top: 6px">Can a shrimp fry rice?</button>\n          <button class="deep-chat-button deep-chat-suggestion-button" style="margin-top: 6px">What is a pistol shrimp?</button>\n        </div>',role:"ai"}],messageStyles:{html:{shared:{bubble:{backgroundColor:"unset",padding:"0px"}}}},style:{height:"370px",borderRadius:"8px"}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {\n    html: `\n      <div class="deep-chat-temporary-message">\n        <button class="deep-chat-button deep-chat-suggestion-button" style="margin-top: 5px">What do shrimps eat?</button>\n        <button class="deep-chat-button deep-chat-suggestion-button" style="margin-top: 6px">Can a shrimp fry rice?</button>\n        <button class="deep-chat-button deep-chat-suggestion-button" style="margin-top: 6px">What is a pistol shrimp?</button>\n      </div>`,\n    role: \'ai\',\n  },\n];\n\nchatElementRef.messageStyles = {html: {shared: {bubble: {backgroundColor: \'unset\', padding: \'0px\'}}}};\n'})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {text: 'How are you doing?', role: 'user'},\n  {text: 'Good, how may I help?', role: 'ai'},\n  {\n    html: `\n      <div class=\"deep-chat-temporary-message\">\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"margin-top: 5px\">What do shrimps eat?</button>\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"margin-top: 6px\">Can a shrimp fry rice?</button>\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"margin-top: 6px\">What is a pistol shrimp?</button>\n      </div>`,\n    role: 'ai',\n  },\n];\n\nchatElementRef.messageStyles = {html: {shared: {bubble: {backgroundColor: 'unset', padding: '0px'}}}};\n\nObject.assign(chatElementRef.style, {height: '370px', borderRadius: '8px'});\n\nchatElementRef.demo = true;\n"})})})]}),"\n",(0,a.jsx)(r.A,{}),"\n",(0,a.jsx)("h3",{children:"Controlled responses"}),"\n",(0,a.jsx)(t.p,{children:"Preset user responses which can be used to give feedback, follow a conversation path or control a service."}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,history:[{text:"Can I monitor your diet?",role:"ai"},{text:"Yes",role:"user"},{text:"Have you drank water?",role:"ai"},{html:'\n        <div class="deep-chat-temporary-message">\n          <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid green">Yes</button>\n          <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid #d80000">No</button>\n        </div>',role:"user"}],messageStyles:{html:{shared:{bubble:{backgroundColor:"unset",padding:"0px",width:"100%",textAlign:"right"}}}},style:{height:"370px",borderRadius:"8px"},textInput:{disabled:!0,placeholder:{text:"Use buttons to respond"}},submitButtonStyles:{disabled:{container:{default:{opacity:0,cursor:"auto"}}}},demo:{response:{text:"What about now?",html:'\n        <div class="deep-chat-temporary-message">\n          <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid green">Yes</button>\n          <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid #d80000">No</button>\n        </div>'}}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {\n    html: `\n      <div class=\"deep-chat-temporary-message\">\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"border: 1px solid green\">Yes</button>\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"border: 1px solid #d80000\">No</button>\n      </div>`,\n    role: 'user',\n  },\n];\n\nchatElementRef.messageStyles = {\n  html: {shared: {bubble: {backgroundColor: 'unset', padding: '0px', width: '100%', textAlign: 'right'}}},\n};\n"})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {text: 'Can I monitor your diet?', role: 'ai'},\n  {text: 'Yes', role: 'user'},\n  {text: 'Have you drank water?', role: 'ai'},\n  {\n    html: `\n      <div class=\"deep-chat-temporary-message\">\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"border: 1px solid green\">Yes</button>\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"border: 1px solid #d80000\">No</button>\n      </div>`,\n    role: 'user',\n  },\n];\n\nchatElementRef.messageStyles = {\n  html: {shared: {bubble: {backgroundColor: 'unset', padding: '0px', width: '100%', textAlign: 'right'}}},\n};\n\nchatElementRef.textInput = {disabled: true, placeholder: {text: 'Use buttons to respond'}};\n\nchatElementRef.submitButtonStyles = {disabled: {container: {default: {opacity: 0, cursor: 'auto'}}}};\n\nchatElementRef.demo = {\n  response: {\n    text: 'What about now?',\n    html: `\n      <div class=\"deep-chat-temporary-message\">\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"border: 1px solid green\">Yes</button>\n        <button class=\"deep-chat-button deep-chat-suggestion-button\" style=\"border: 1px solid #d80000\">No</button>\n      </div>`,\n  },\n};\n\nObject.assign(chatElementRef.style, {height: '370px', borderRadius: '8px'});\n"})})})]}),"\n",(0,a.jsx)(r.A,{}),"\n",(0,a.jsx)("h3",{children:"Feedback"}),"\n",(0,a.jsx)(t.p,{children:"Add feedback buttons to response messages."}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,history:[{text:"What is mitochondria?",role:"user"},{html:'<div class="feedback">\n          <div class="feedback-text">The powerhouse of a cell.</div>\n          <img class="feedback-icon feedback-icon-positive" src="/img/thumbsUp.svg">\n          <img class="feedback-icon feedback-icon-negative" src="/img/thumbsUp.svg">\n        </div>',role:"ai"},{text:"What kind of dog should I get?",role:"user"},{html:'<div class="feedback">\n          <div class="feedback-text">A labrador.</div>\n          <img class="feedback-icon feedback-icon-positive" src="/img/thumbsUp.svg">\n          <img class="feedback-icon feedback-icon-negative" src="/img/thumbsUp.svg">\n        </div>',role:"ai"}],messageStyles:{default:{shared:{bubble:{maxWidth:"95%",width:"100%",marginTop:"10px"}}},loading:{message:{styles:{bubble:{width:"1em"}}}}},htmlClassUtilities:{feedback:{styles:{default:{display:"flex"}}},"feedback-text":{styles:{default:{width:"calc(100% - 42px)",paddingTop:"2px"}}},"feedback-icon":{styles:{default:{width:"20px",height:"20px",cursor:"pointer",borderRadius:"5px"},hover:{backgroundColor:"#d1d1d1"}}},"feedback-icon-positive":{events:{click:()=>{console.log("positive response")}}},"feedback-icon-negative":{events:{click:()=>{console.log("negative response")}},styles:{default:{transform:"rotate(180deg)",marginLeft:"3px"}}}},style:{height:"370px",borderRadius:"8px"},demo:{response:{html:'\n        <div class="feedback">\n          <div class="feedback-text">Example response.</div>\n          <img class="feedback-icon feedback-icon-positive" src="/img/thumbsUp.svg">\n          <img class="feedback-icon feedback-icon-negative" src="/img/thumbsUp.svg">\n        </div>'}}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {\n    html: `<div class=\"feedback\">\n        <div class=\"feedback-text\">The powerhouse of a cell.</div>\n        <img class=\"feedback-icon feedback-icon-positive\" src=\"path-to-svg.svg\">\n        <img class=\"feedback-icon feedback-icon-negative\" src=\"path-to-svg.svg\">\n      </div>`,\n    role: 'ai',\n  },\n  {\n    html: `<div class=\"feedback\">\n      <div class=\"feedback-text\">A labrador.</div>\n      <img class=\"feedback-icon feedback-icon-positive\" src=\"path-to-svg.svg\">\n      <img class=\"feedback-icon feedback-icon-negative\" src=\"path-to-svg.svg\">\n    </div>`,\n    role: 'ai',\n  },\n];\n\nchatElementRef.messageStyles = {\n  default: {shared: {bubble: {maxWidth: '95%', width: '100%', marginTop: '10px'}}},\n};\n\nchatElementRef.htmlClassUtilities = {\n  feedback: {styles: {default: {display: 'flex'}}},\n  'feedback-text': {styles: {default: {width: 'calc(100% - 42px)', paddingTop: '2px'}}},\n  'feedback-icon': {\n    styles: {\n      default: {width: '20px', height: '20px', cursor: 'pointer', borderRadius: '5px'},\n      hover: {backgroundColor: '#d1d1d1'},\n    },\n  },\n  'feedback-icon-positive': {events: {click: () => console.log('positive response')}},\n  'feedback-icon-negative': {\n    events: {click: () => console.log('negative response')},\n    styles: {default: {transform: 'rotate(180deg)', marginLeft: '3px'}},\n  },\n};\n"})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {text: 'What is mitochondria?', role: 'user'},\n  {\n    html: `<div class=\"feedback\">\n        <div class=\"feedback-text\">The powerhouse of a cell.</div>\n        <img class=\"feedback-icon feedback-icon-positive\" src=\"path-to-svg.svg\">\n        <img class=\"feedback-icon feedback-icon-negative\" src=\"path-to-svg.svg\">\n      </div>`,\n    role: 'ai',\n  },\n  {text: 'What kind of dog should I get?', role: 'user'},\n  {\n    html: `<div class=\"feedback\">\n      <div class=\"feedback-text\">A labrador.</div>\n      <img class=\"feedback-icon feedback-icon-positive\" src=\"path-to-svg.svg\">\n      <img class=\"feedback-icon feedback-icon-negative\" src=\"path-to-svg.svg\">\n    </div>`,\n    role: 'ai',\n  },\n];\n\nchatElementRef.messageStyles = {\n  default: {shared: {bubble: {maxWidth: '95%', width: '100%', marginTop: '10px'}}},\n  loading: {message: {styles: {bubble: {width: '1em'}}}},\n};\n\nchatElementRef.htmlClassUtilities = {\n  feedback: {styles: {default: {display: 'flex'}}},\n  'feedback-text': {styles: {default: {width: 'calc(100% - 42px)', paddingTop: '2px'}}},\n  'feedback-icon': {\n    styles: {\n      default: {width: '20px', height: '20px', cursor: 'pointer', borderRadius: '5px'},\n      hover: {backgroundColor: '#d1d1d1'},\n    },\n  },\n  'feedback-icon-positive': {events: {click: () => console.log('positive response')}},\n  'feedback-icon-negative': {\n    events: {click: () => console.log('negative response')},\n    styles: {default: {transform: 'rotate(180deg)', marginLeft: '3px'}},\n  },\n};\n\nObject.assign(chatElementRef.style, {height: '370px', borderRadius: '8px'});\n\nchatElementRef.demo = {\n  response: {\n    html: `\n      <div class=\"feedback\">\n        <div class=\"feedback-text\">Example response.</div>\n        <img class=\"feedback-icon feedback-icon-positive\" src=\"path-to-svg.svg\">\n        <img class=\"feedback-icon feedback-icon-negative\" src=\"path-to-svg.svg\">\n      </div>`,\n  },\n};\n"})})})]}),"\n",(0,a.jsx)(r.A,{}),"\n",(0,a.jsx)("h3",{children:"Custom Element - Chart"}),"\n",(0,a.jsxs)(t.p,{children:["Add a chart component (e.g. using ",(0,a.jsx)(t.a,{href:"https://developers.google.com/chart",children:"Google Chart"}),"). Live example for ",(0,a.jsx)(t.a,{href:"https://codesandbox.io/s/deep-chat-react-chart-ztsgrd?file=/src/App.tsx",children:"React"}),"."]}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,history:[{text:"Can you give me an example chart",role:"user"},{html:'\n        <div>\n          <div style="margin-bottom: 10px">Here is an example chart:</div>\n          <google-chart style="width: 220px; height: 200px" data=\'[["Planet", "Score"], ["Earth", 50], ["Moon", 100], ["Saturn", 80]]\' options=\'{"legend": "none"}\'></google-chart>\n        </div>\n        ',role:"ai"}],style:{height:"370px",borderRadius:"8px"},demo:{response:{html:'\n        <google-chart style="width: 220px; height: 200px" data=\'[["Planet", "Score"], ["Mars", 80], ["Mercury", 100], ["Venus", 50]]\' options=\'{"legend": "none"}\'></google-chart>'}}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {\n    html: `\n      <div>\n        <div style="margin-bottom: 10px">Here is an example chart:</div>\n        <google-chart\n          style="width: 220px; height: 200px"\n          data=\'[["Planet", "Score"], ["Earth", 50], ["Moon", 100], ["Saturn", 80]]\'\n          options=\'{"legend": "none"}\'>\n        </google-chart>\n      </div>\n      `,\n    role: \'ai\',\n  },\n];\n'})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {text: \'Can you give me an example chart\', role: \'user\'},\n  {\n    html: `\n      <div>\n        <div style="margin-bottom: 10px">Here is an example chart:</div>\n        <google-chart\n          style="width: 220px; height: 200px"\n          data=\'[["Planet", "Score"], ["Earth", 50], ["Moon", 100], ["Saturn", 80]]\'\n          options=\'{"legend": "none"}\'>\n        </google-chart>\n      </div>\n      `,\n    role: \'ai\',\n  },\n];\n\nObject.assign(chatElementRef.style, {height: \'370px\', borderRadius: \'8px\'});\n\nchatElementRef.demo = {\n  response: {\n    html: `\n      <google-chart\n        style="width: 220px; height: 200px"\n        data=\'[["Planet", "Score"], ["Mars", 80], ["Mercury", 100], ["Venus", 50]]\'\n        options=\'{"legend": "none"}\'>\n      </google-chart>`,\n  },\n};\n'})})})]}),"\n",(0,a.jsx)(r.A,{}),"\n",(0,a.jsx)("h3",{children:"Custom Element - Table"}),"\n",(0,a.jsxs)(t.p,{children:["Add an interactive table component (e.g. using ",(0,a.jsx)(t.a,{href:"https://activetable.io/",children:"Active Table"}),")."]}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(i.A,{demo:!0,history:[{text:"Generate a table with info about planets",role:"user"},{html:'\n        <div>\n          <div style="margin-bottom: 10px">Here is a simple example:</div>\n          <active-table\n            data=\'[["Planet", "Mass"], ["Earth", 5.97], ["Mars", 0.642], ["Jupiter", 1898]]\'\n            cellStyle=\'{"width": "80px"}\'\n            displayAddNewRow="false"\n            displayAddNewColumn="false">\n          </active-table>\n        </div>',role:"ai"}],style:{height:"370px",borderRadius:"8px"},demo:{response:{html:'\n        <active-table content=\'[["Planet", "Mass", "Moons"], ["Saturn", 82, 1], ["Neptune", 14, 2], ["Mercury", 0.33, 0]]\' cellStyle=\'{"width": "75px"}\' displayAddNewRow="false" displayAddNewColumn="false"></active-table>'}}})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(c.A,{value:"js",label:"Sample code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {\n    html: `\n      <div>\n        <div style="margin-bottom: 10px">Here is a simple example:</div>\n        <active-table\n          data=\'[["Planet", "Mass"], ["Earth", 5.97], ["Mars", 0.642], ["Jupiter", 1898]]\'\n          cellStyle=\'{"width": "80px"}\'\n          displayAddNewRow="false"\n          displayAddNewColumn="false">\n        </active-table>\n      </div>`,\n    role: \'ai\',\n  },\n];\n'})})}),(0,a.jsx)(c.A,{value:"py",label:"Full code",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'// using JavaScript for a simplified example\n\nchatElementRef.history = [\n  {text: \'Generate a table with info about planets\', role: \'user\'},\n  {\n    html: `\n      <div>\n        <div style="margin-bottom: 10px">Here is a simple example:</div>\n        <active-table\n          data=\'[["Planet", "Mass"], ["Earth", 5.97], ["Mars", 0.642], ["Jupiter", 1898]]\'\n          cellStyle=\'{"width": "75px"}\'\n          displayAddNewRow="false"\n          displayAddNewColumn="false">\n        </active-table>\n      </div>`,\n    role: \'ai\',\n  },\n];\n\nObject.assign(chatElementRef.style, {height: \'370px\', borderRadius: \'8px\'});\n\nchatElementRef.demo = {\n  response: {\n    html: `\n      <active-table\n          content=\'[["Planet", "Mass", "Moons"], ["Saturn", 82, 1], ["Neptune", 14, 2], ["Mercury", 0.33, 0]]\'\n          cellStyle=\'{"width": "80px"}\'\n          displayAddNewRow="false"\n          displayAddNewColumn="false">\n        </active-table>`,\n  },\n};\n'})})})]}),"\n",(0,a.jsx)(r.A,{})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}},15781:(e,t,n)=>{n.d(t,{A:()=>a});n(96540);var s=n(74848);function a(){return(0,s.jsx)("div",{style:{height:"1px"}})}},24033:(e,t,n)=>{n.d(t,{A:()=>o,q:()=>a});n(96540);var s=n(74848);function a(e){return e?.children[0]?.children[0]}function o({children:e,minHeight:t,innerDisplay:n}){return(0,s.jsx)("div",{className:"documentation-example-container",style:{minHeight:`${t||400}px`},children:(0,s.jsx)("div",{style:{display:n||"block"},children:e})})}},50363:(e,t,n)=>{n.d(t,{A:()=>o});var s=n(78478),a=(n(96540),n(74848));function o(e){return(0,a.jsx)(s.A,{children:()=>{const t=n(78152).DeepChat;return(0,a.jsx)(t,{...e,children:e.children})}})}},59359:(e,t,n)=>{n.d(t,{W:()=>a});class s extends HTMLElement{constructor(){super(),this.textContent="This is a Custom Element"}}function a(){customElements.get("custom-element")||customElements.define("custom-element",s)}},61886:(e,t,n)=>{function s(e){window.scrollY>0?e.style.boxShadow="0 1px 2px 0 rgb(0 0 0 / 10%)":e.style.boxShadow="unset"}function a(){setTimeout((()=>{window.removeEventListener("scroll",window.toggleNavOnScroll);const e=document.getElementsByClassName("navbar--fixed-top");if(e[0]){const t=e[0];s(t),window.toggleNavOnScroll=s.bind(this,t),window.addEventListener("scroll",window.toggleNavOnScroll)}}),2)}function o(){setTimeout((()=>{const e=document.querySelectorAll(".homepage > body > #__docusaurus > nav")?.[0];try{e.classList.add("fade-in")}catch(t){console.error(t),console.log("element was not rendered in time - use MutationObserver")}}),2)}n.r(t),n.d(t,{fadeIn:()=>o,readdAutoNavShadowToggle:()=>a})}}]);